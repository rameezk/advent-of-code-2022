#!/usr/bin/env python

import re
from enum import StrEnum, auto
from pathlib import Path
from typing import Optional

import requests
import typer
from bs4 import BeautifulSoup
from cookiecutter.main import cookiecutter

BASE_URL = "https://adventofcode.com"
AOC_YEAR = "2022"

app = typer.Typer()


class AnswerStatus(StrEnum):
    ALREADY_SUBMITTED = auto()
    CORRECT = auto()
    INCORRECT = auto()
    UNKNOWN = auto()


def echo_info(msg: str):
    typer.secho(f"[..] {msg}", fg=typer.colors.MAGENTA)


def echo_error(msg: str):
    typer.secho(msg, fg=typer.colors.RED)


def _get_session_cookie() -> str:
    fpath = Path(__file__).parent.parent / ".session"

    if not fpath.is_file():
        echo_error(f"Missing cookie information in {fpath}")
        raise typer.Exit(1)

    with open(fpath.resolve()) as f:
        session_cookie = f.read()
        return session_cookie


def _print_data_sample(data: str):
    echo_info("Here's a sample of the data")
    typer.secho(data[:100], fg=typer.colors.GREEN)


def _get_input_data(day: int) -> str:
    url = f"{BASE_URL}/{AOC_YEAR}/day/{day}/input"
    response = requests.get(url, headers={"Cookie": f"session={_get_session_cookie()}"})

    if response.status_code != 200:
        echo_error(f"Could not download input. Got status code {response.status_code}.")
        raise typer.Exit(1)

    return response.text


def _save_data_to_file(data: str, fpath: str):
    with open(fpath, "w") as f:
        f.write(data)


def _infer_day_from_path() -> int:
    dir_name = Path(".").resolve().name
    day = re.search(r"^day[-|_](\d+)$", dir_name.lower()).group(1)
    return int(day)


def _map_answer_submission_to_status(text: str) -> AnswerStatus:
    if "you don't seem to be solving the right level" in text.lower():
        return AnswerStatus.ALREADY_SUBMITTED
    elif "that's not the right answer" in text.lower():
        return AnswerStatus.INCORRECT
    elif "that's the right answer" in text.lower():
        return AnswerStatus.CORRECT
    else:
        return AnswerStatus.UNKNOWN


def _submit_answer(answer: str, day: int, part: 1) -> (AnswerStatus, str):
    url = f"{BASE_URL}/{AOC_YEAR}/day/{day}/answer"
    response = requests.post(
        url,
        data={"level": part, "answer": answer},
        headers={"Cookie": f"session={_get_session_cookie()}"},
    )
    soup = BeautifulSoup(response.content, "html.parser")
    text: str = soup.body.article.p.text

    if not text:
        echo_error(f"Failed to parse the response from Advent of Code")
        raise typer.Exit(1)

    status = _map_answer_submission_to_status(text)
    return status, text


@app.command()
def download_input(
    day: Optional[int] = typer.Argument(None, min=1, max=25),
    output_filename: str = "input.txt",
):
    if day is None:
        echo_info("Inferring day from directory")
        day = _infer_day_from_path()
        echo_info(f"Day found to be {day}")

    echo_info(f"Downloading input for day {day}")
    data = _get_input_data(day)
    _print_data_sample(data)
    _save_data_to_file(data, output_filename)
    echo_info(f"Input data saved to {output_filename}")


@app.command()
def submit_answer(
    answer: str,
    day: Optional[int] = typer.Option(None, min=1, max=25),
    part: int = typer.Option(..., min=1, max=2),
):
    if day is None:
        echo_info("Attempting to infer day")
        day = _infer_day_from_path()
        echo_info(f"Day found to be {day}")

    typer.secho(f"Submitting answer for day {day} part {part}")
    status, text = _submit_answer(answer, day, part)
    match status:
        case AnswerStatus.ALREADY_SUBMITTED:
            typer.secho(text, fg=typer.colors.BLACK, bg=typer.colors.BLUE)
        case AnswerStatus.INCORRECT:
            typer.secho(text, fg=typer.colors.BLACK, bg=typer.colors.RED)
        case AnswerStatus.CORRECT:
            typer.secho(text, fg=typer.colors.BLACK, bg=typer.colors.GREEN)
        case _:
            typer.secho(text, fg=typer.colors.BLACK, bg=typer.colors.MAGENTA)


@app.command(help="Generate the scaffolding for the day's puzzle")
def generate(day: int = typer.Option(..., min=1, max=25)):
    echo_info(f"Generating scaffolding for day {day}")
    project_root = Path(__file__).parent.parent
    directory_to_create = project_root / f"day_{day:02}"
    template_path = project_root / "__template__"

    if directory_to_create.is_dir():
        echo_error(f"Directory {directory_to_create} already exists.")
        raise typer.Exit(1)

    cookiecutter(
        str(template_path.resolve()),
        extra_context={"aoc_day": f"{day:02}"},
        no_input=True,
        output_dir=project_root,
    )


if __name__ == "__main__":
    app()
